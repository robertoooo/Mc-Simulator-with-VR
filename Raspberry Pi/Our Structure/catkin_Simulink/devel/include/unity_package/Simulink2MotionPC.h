// Generated by gencpp from file unity_package/Simulink2MotionPC.msg
// DO NOT EDIT!


#ifndef UNITY_PACKAGE_MESSAGE_SIMULINK2MOTIONPC_H
#define UNITY_PACKAGE_MESSAGE_SIMULINK2MOTIONPC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_package
{
template <class ContainerAllocator>
struct Simulink2MotionPC_
{
  typedef Simulink2MotionPC_<ContainerAllocator> Type;

  Simulink2MotionPC_()
    : x_ddot(0.0)
    , y_ddot(0.0)
    , z_ddot(0.0)
    , roll_ddot(0.0)
    , pitch_ddot(0.0)
    , yaw_ddot(0.0)  {
    }
  Simulink2MotionPC_(const ContainerAllocator& _alloc)
    : x_ddot(0.0)
    , y_ddot(0.0)
    , z_ddot(0.0)
    , roll_ddot(0.0)
    , pitch_ddot(0.0)
    , yaw_ddot(0.0)  {
  (void)_alloc;
    }



   typedef double _x_ddot_type;
  _x_ddot_type x_ddot;

   typedef double _y_ddot_type;
  _y_ddot_type y_ddot;

   typedef double _z_ddot_type;
  _z_ddot_type z_ddot;

   typedef double _roll_ddot_type;
  _roll_ddot_type roll_ddot;

   typedef double _pitch_ddot_type;
  _pitch_ddot_type pitch_ddot;

   typedef double _yaw_ddot_type;
  _yaw_ddot_type yaw_ddot;




  typedef boost::shared_ptr< ::unity_package::Simulink2MotionPC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_package::Simulink2MotionPC_<ContainerAllocator> const> ConstPtr;

}; // struct Simulink2MotionPC_

typedef ::unity_package::Simulink2MotionPC_<std::allocator<void> > Simulink2MotionPC;

typedef boost::shared_ptr< ::unity_package::Simulink2MotionPC > Simulink2MotionPCPtr;
typedef boost::shared_ptr< ::unity_package::Simulink2MotionPC const> Simulink2MotionPCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_package::Simulink2MotionPC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace unity_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'unity_package': ['/home/mcsim/catkin_Simulink/src/unity_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_package::Simulink2MotionPC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_package::Simulink2MotionPC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_package::Simulink2MotionPC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f42ae6ddad2a7bc05f1d468d2ad4cc0f";
  }

  static const char* value(const ::unity_package::Simulink2MotionPC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf42ae6ddad2a7bc0ULL;
  static const uint64_t static_value2 = 0x5f1d468d2ad4cc0fULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_package/Simulink2MotionPC";
  }

  static const char* value(const ::unity_package::Simulink2MotionPC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_ddot \n\
float64 y_ddot\n\
float64 z_ddot\n\
float64 roll_ddot\n\
float64 pitch_ddot\n\
float64 yaw_ddot\n\
\n\
";
  }

  static const char* value(const ::unity_package::Simulink2MotionPC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_ddot);
      stream.next(m.y_ddot);
      stream.next(m.z_ddot);
      stream.next(m.roll_ddot);
      stream.next(m.pitch_ddot);
      stream.next(m.yaw_ddot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Simulink2MotionPC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_package::Simulink2MotionPC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_package::Simulink2MotionPC_<ContainerAllocator>& v)
  {
    s << indent << "x_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.x_ddot);
    s << indent << "y_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.y_ddot);
    s << indent << "z_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.z_ddot);
    s << indent << "roll_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.roll_ddot);
    s << indent << "pitch_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_ddot);
    s << indent << "yaw_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_ddot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_PACKAGE_MESSAGE_SIMULINK2MOTIONPC_H
