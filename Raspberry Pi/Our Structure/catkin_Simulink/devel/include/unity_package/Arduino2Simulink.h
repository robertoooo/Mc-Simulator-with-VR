// Generated by gencpp from file unity_package/Arduino2Simulink.msg
// DO NOT EDIT!


#ifndef UNITY_PACKAGE_MESSAGE_ARDUINO2SIMULINK_H
#define UNITY_PACKAGE_MESSAGE_ARDUINO2SIMULINK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_package
{
template <class ContainerAllocator>
struct Arduino2Simulink_
{
  typedef Arduino2Simulink_<ContainerAllocator> Type;

  Arduino2Simulink_()
    : steering_sensor(0.0)
    , acc_sensor(0.0)
    , brake_front(0.0)
    , brake_back(0.0)
    , emergency_freeze(0)
    , to_neutral(0)  {
    }
  Arduino2Simulink_(const ContainerAllocator& _alloc)
    : steering_sensor(0.0)
    , acc_sensor(0.0)
    , brake_front(0.0)
    , brake_back(0.0)
    , emergency_freeze(0)
    , to_neutral(0)  {
  (void)_alloc;
    }



   typedef float _steering_sensor_type;
  _steering_sensor_type steering_sensor;

   typedef float _acc_sensor_type;
  _acc_sensor_type acc_sensor;

   typedef float _brake_front_type;
  _brake_front_type brake_front;

   typedef float _brake_back_type;
  _brake_back_type brake_back;

   typedef int32_t _emergency_freeze_type;
  _emergency_freeze_type emergency_freeze;

   typedef int32_t _to_neutral_type;
  _to_neutral_type to_neutral;




  typedef boost::shared_ptr< ::unity_package::Arduino2Simulink_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_package::Arduino2Simulink_<ContainerAllocator> const> ConstPtr;

}; // struct Arduino2Simulink_

typedef ::unity_package::Arduino2Simulink_<std::allocator<void> > Arduino2Simulink;

typedef boost::shared_ptr< ::unity_package::Arduino2Simulink > Arduino2SimulinkPtr;
typedef boost::shared_ptr< ::unity_package::Arduino2Simulink const> Arduino2SimulinkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_package::Arduino2Simulink_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_package::Arduino2Simulink_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace unity_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'unity_package': ['/home/mcsim/catkin_Simulink/src/unity_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_package::Arduino2Simulink_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_package::Arduino2Simulink_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_package::Arduino2Simulink_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e173c33e0758ea7211b5bab2745be52";
  }

  static const char* value(const ::unity_package::Arduino2Simulink_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e173c33e0758ea7ULL;
  static const uint64_t static_value2 = 0x211b5bab2745be52ULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_package/Arduino2Simulink";
  }

  static const char* value(const ::unity_package::Arduino2Simulink_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steering_sensor\n\
float32 acc_sensor\n\
float32 brake_front\n\
float32 brake_back\n\
int32 emergency_freeze\n\
int32 to_neutral\n\
";
  }

  static const char* value(const ::unity_package::Arduino2Simulink_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_sensor);
      stream.next(m.acc_sensor);
      stream.next(m.brake_front);
      stream.next(m.brake_back);
      stream.next(m.emergency_freeze);
      stream.next(m.to_neutral);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Arduino2Simulink_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_package::Arduino2Simulink_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_package::Arduino2Simulink_<ContainerAllocator>& v)
  {
    s << indent << "steering_sensor: ";
    Printer<float>::stream(s, indent + "  ", v.steering_sensor);
    s << indent << "acc_sensor: ";
    Printer<float>::stream(s, indent + "  ", v.acc_sensor);
    s << indent << "brake_front: ";
    Printer<float>::stream(s, indent + "  ", v.brake_front);
    s << indent << "brake_back: ";
    Printer<float>::stream(s, indent + "  ", v.brake_back);
    s << indent << "emergency_freeze: ";
    Printer<int32_t>::stream(s, indent + "  ", v.emergency_freeze);
    s << indent << "to_neutral: ";
    Printer<int32_t>::stream(s, indent + "  ", v.to_neutral);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_PACKAGE_MESSAGE_ARDUINO2SIMULINK_H
