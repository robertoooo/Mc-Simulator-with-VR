// Generated by gencpp from file unity_package/UnityMsg.msg
// DO NOT EDIT!


#ifndef UNITY_PACKAGE_MESSAGE_UNITYMSG_H
#define UNITY_PACKAGE_MESSAGE_UNITYMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_package
{
template <class ContainerAllocator>
struct UnityMsg_
{
  typedef UnityMsg_<ContainerAllocator> Type;

  UnityMsg_()
    : running(false)
    , offroad(false)
    , crash(0)
    , incline(0.0)
    , leaning(0.0)  {
    }
  UnityMsg_(const ContainerAllocator& _alloc)
    : running(false)
    , offroad(false)
    , crash(0)
    , incline(0.0)
    , leaning(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _running_type;
  _running_type running;

   typedef uint8_t _offroad_type;
  _offroad_type offroad;

   typedef int32_t _crash_type;
  _crash_type crash;

   typedef float _incline_type;
  _incline_type incline;

   typedef float _leaning_type;
  _leaning_type leaning;




  typedef boost::shared_ptr< ::unity_package::UnityMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_package::UnityMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UnityMsg_

typedef ::unity_package::UnityMsg_<std::allocator<void> > UnityMsg;

typedef boost::shared_ptr< ::unity_package::UnityMsg > UnityMsgPtr;
typedef boost::shared_ptr< ::unity_package::UnityMsg const> UnityMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_package::UnityMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_package::UnityMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace unity_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'unity_package': ['/home/mcsim/catkin_Simulink/src/unity_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::unity_package::UnityMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_package::UnityMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_package::UnityMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_package::UnityMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_package::UnityMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_package::UnityMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_package::UnityMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e63d3aac35859f6526118315ffe95ce";
  }

  static const char* value(const ::unity_package::UnityMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e63d3aac35859f6ULL;
  static const uint64_t static_value2 = 0x526118315ffe95ceULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_package::UnityMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_package/UnityMsg";
  }

  static const char* value(const ::unity_package::UnityMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_package::UnityMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool running\n\
bool offroad\n\
int32 crash\n\
float32 incline\n\
float32 leaning\n\
";
  }

  static const char* value(const ::unity_package::UnityMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_package::UnityMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.running);
      stream.next(m.offroad);
      stream.next(m.crash);
      stream.next(m.incline);
      stream.next(m.leaning);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnityMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_package::UnityMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_package::UnityMsg_<ContainerAllocator>& v)
  {
    s << indent << "running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.running);
    s << indent << "offroad: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offroad);
    s << indent << "crash: ";
    Printer<int32_t>::stream(s, indent + "  ", v.crash);
    s << indent << "incline: ";
    Printer<float>::stream(s, indent + "  ", v.incline);
    s << indent << "leaning: ";
    Printer<float>::stream(s, indent + "  ", v.leaning);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_PACKAGE_MESSAGE_UNITYMSG_H
