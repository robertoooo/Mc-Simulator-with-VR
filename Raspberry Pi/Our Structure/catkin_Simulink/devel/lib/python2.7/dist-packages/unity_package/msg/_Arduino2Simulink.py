# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unity_package/Arduino2Simulink.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Arduino2Simulink(genpy.Message):
  _md5sum = "4e173c33e0758ea7211b5bab2745be52"
  _type = "unity_package/Arduino2Simulink"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 steering_sensor
float32 acc_sensor
float32 brake_front
float32 brake_back
int32 emergency_freeze
int32 to_neutral
"""
  __slots__ = ['steering_sensor','acc_sensor','brake_front','brake_back','emergency_freeze','to_neutral']
  _slot_types = ['float32','float32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       steering_sensor,acc_sensor,brake_front,brake_back,emergency_freeze,to_neutral

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Arduino2Simulink, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.steering_sensor is None:
        self.steering_sensor = 0.
      if self.acc_sensor is None:
        self.acc_sensor = 0.
      if self.brake_front is None:
        self.brake_front = 0.
      if self.brake_back is None:
        self.brake_back = 0.
      if self.emergency_freeze is None:
        self.emergency_freeze = 0
      if self.to_neutral is None:
        self.to_neutral = 0
    else:
      self.steering_sensor = 0.
      self.acc_sensor = 0.
      self.brake_front = 0.
      self.brake_back = 0.
      self.emergency_freeze = 0
      self.to_neutral = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f2i().pack(_x.steering_sensor, _x.acc_sensor, _x.brake_front, _x.brake_back, _x.emergency_freeze, _x.to_neutral))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.steering_sensor, _x.acc_sensor, _x.brake_front, _x.brake_back, _x.emergency_freeze, _x.to_neutral,) = _get_struct_4f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f2i().pack(_x.steering_sensor, _x.acc_sensor, _x.brake_front, _x.brake_back, _x.emergency_freeze, _x.to_neutral))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.steering_sensor, _x.acc_sensor, _x.brake_front, _x.brake_back, _x.emergency_freeze, _x.to_neutral,) = _get_struct_4f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f2i = None
def _get_struct_4f2i():
    global _struct_4f2i
    if _struct_4f2i is None:
        _struct_4f2i = struct.Struct("<4f2i")
    return _struct_4f2i
