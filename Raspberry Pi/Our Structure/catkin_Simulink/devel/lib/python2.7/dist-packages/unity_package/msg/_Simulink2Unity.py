# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unity_package/Simulink2Unity.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Simulink2Unity(genpy.Message):
  _md5sum = "3f1a4dc149ebeba4a6042b9b16a4dd4f"
  _type = "unity_package/Simulink2Unity"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 roll
float32 pitch
float32 yaw
float32 speed
float32 rpm
float32 steering_angle
float32 brake_front
float32 throttle
float32 clutch_switch
int32 gear
int32 emergencyStop
float32 rigPositionX
"""
  __slots__ = ['roll','pitch','yaw','speed','rpm','steering_angle','brake_front','throttle','clutch_switch','gear','emergencyStop','rigPositionX']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       roll,pitch,yaw,speed,rpm,steering_angle,brake_front,throttle,clutch_switch,gear,emergencyStop,rigPositionX

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Simulink2Unity, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.speed is None:
        self.speed = 0.
      if self.rpm is None:
        self.rpm = 0.
      if self.steering_angle is None:
        self.steering_angle = 0.
      if self.brake_front is None:
        self.brake_front = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.clutch_switch is None:
        self.clutch_switch = 0.
      if self.gear is None:
        self.gear = 0
      if self.emergencyStop is None:
        self.emergencyStop = 0
      if self.rigPositionX is None:
        self.rigPositionX = 0.
    else:
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.speed = 0.
      self.rpm = 0.
      self.steering_angle = 0.
      self.brake_front = 0.
      self.throttle = 0.
      self.clutch_switch = 0.
      self.gear = 0
      self.emergencyStop = 0
      self.rigPositionX = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f2if().pack(_x.roll, _x.pitch, _x.yaw, _x.speed, _x.rpm, _x.steering_angle, _x.brake_front, _x.throttle, _x.clutch_switch, _x.gear, _x.emergencyStop, _x.rigPositionX))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.roll, _x.pitch, _x.yaw, _x.speed, _x.rpm, _x.steering_angle, _x.brake_front, _x.throttle, _x.clutch_switch, _x.gear, _x.emergencyStop, _x.rigPositionX,) = _get_struct_9f2if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f2if().pack(_x.roll, _x.pitch, _x.yaw, _x.speed, _x.rpm, _x.steering_angle, _x.brake_front, _x.throttle, _x.clutch_switch, _x.gear, _x.emergencyStop, _x.rigPositionX))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.roll, _x.pitch, _x.yaw, _x.speed, _x.rpm, _x.steering_angle, _x.brake_front, _x.throttle, _x.clutch_switch, _x.gear, _x.emergencyStop, _x.rigPositionX,) = _get_struct_9f2if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f2if = None
def _get_struct_9f2if():
    global _struct_9f2if
    if _struct_9f2if is None:
        _struct_9f2if = struct.Struct("<9f2if")
    return _struct_9f2if
